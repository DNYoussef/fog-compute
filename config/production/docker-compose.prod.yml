# Fog Compute Production Docker Compose Configuration
# Production-ready setup with security hardening, monitoring, and high availability
# Usage: docker-compose -f docker-compose.prod.yml up -d

version: '3.8'

services:
  # =============================================================================
  # REVERSE PROXY (Nginx)
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: fog-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - fog-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - SETUID
      - SETGID

  # =============================================================================
  # DATABASE (PostgreSQL with replication-ready setup)
  # =============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: fog-postgres
    environment:
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: ${POSTGRES_DB:-fog_compute}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
      # Performance tuning
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_MAINTENANCE_WORK_MEM: 128MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 100
      POSTGRES_RANDOM_PAGE_COST: 1.1
      POSTGRES_EFFECTIVE_IO_CONCURRENCY: 200
      POSTGRES_WORK_MEM: 6553kB
      POSTGRES_MIN_WAL_SIZE: 1GB
      POSTGRES_MAX_WAL_SIZE: 4GB
    secrets:
      - postgres_user
      - postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ./scripts/postgres-init:/docker-entrypoint-initdb.d:ro
    networks:
      - database-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fog_user -d fog_compute"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
      - DAC_OVERRIDE
    # Run as non-root user
    user: postgres

  # =============================================================================
  # BACKEND API (FastAPI)
  # =============================================================================
  backend:
    build:
      context: ../../
      dockerfile: backend/Dockerfile
      target: production
      args:
        - PYTHON_VERSION=3.11
    container_name: fog-backend
    environment:
      DATABASE_URL: postgresql+asyncpg://fog_user:${POSTGRES_PASSWORD}@postgres:5432/fog_compute
      SECRET_KEY_FILE: /run/secrets/jwt_secret
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      API_HOST: 0.0.0.0
      API_PORT: 8000
      ENVIRONMENT: production
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      PYTHONPATH: /app
      # Security
      FORCE_HTTPS: "true"
      REQUIRE_STRONG_SECRETS: "true"
      # Performance
      WORKERS: ${WORKERS:-4}
      WORKER_CONNECTIONS: 1000
    secrets:
      - jwt_secret
      - postgres_password
      - redis_password
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fog-network
      - database-network
      - betanet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    # Run as non-root user
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # =============================================================================
  # FRONTEND (Next.js)
  # =============================================================================
  frontend:
    build:
      context: ../../apps/control-panel
      dockerfile: Dockerfile
      target: production
      args:
        - NODE_VERSION=20
    container_name: fog-frontend
    environment:
      NEXT_PUBLIC_API_URL: https://api.yourdomain.com
      NODE_ENV: production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - fog-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp
      - /app/.next/cache
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # =============================================================================
  # REDIS (Caching and Rate Limiting)
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: fog-redis
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 60 1
      --loglevel warning
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
    networks:
      - fog-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # =============================================================================
  # MONITORING STACK
  # =============================================================================

  prometheus:
    image: prom/prometheus:latest
    container_name: fog-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alerts:/etc/prometheus/alerts:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring-network
      - fog-network
      - betanet-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "nobody"

  grafana:
    image: grafana/grafana:latest
    container_name: fog-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_password
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_ROOT_URL: https://grafana.yourdomain.com
      GF_SECURITY_ALLOW_EMBEDDING: "false"
      GF_LOG_LEVEL: ${LOG_LEVEL:-info}
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_COOKIE_SAMESITE: strict
      GF_SECURITY_DISABLE_GRAVATAR: "true"
      GF_SNAPSHOTS_EXTERNAL_ENABLED: "false"
    secrets:
      - grafana_password
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - grafana_data:/var/lib/grafana
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - monitoring-network
      - fog-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  loki:
    image: grafana/loki:latest
    container_name: fog-loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - monitoring-network
      - fog-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # =============================================================================
  # BACKUP SERVICE
  # =============================================================================
  backup:
    image: postgres:15-alpine
    container_name: fog-backup
    environment:
      PGHOST: postgres
      PGDATABASE: fog_compute
      PGUSER_FILE: /run/secrets/postgres_user
      PGPASSWORD_FILE: /run/secrets/postgres_password
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
    secrets:
      - postgres_user
      - postgres_password
    volumes:
      - postgres_backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - database-network
    restart: unless-stopped
    entrypoint: ["/bin/sh", "-c", "crond -f"]
    security_opt:
      - no-new-privileges:true

# =============================================================================
# DOCKER SECRETS (production secret management)
# =============================================================================
secrets:
  postgres_user:
    external: true
  postgres_password:
    external: true
  jwt_secret:
    external: true
  redis_password:
    external: true
  grafana_password:
    external: true

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  nginx_logs:
    driver: local

# =============================================================================
# NETWORKS (with network segmentation for security)
# =============================================================================
networks:
  fog-network:
    driver: bridge
    name: fog-network
    ipam:
      config:
        - subnet: 172.28.0.0/16
  database-network:
    driver: bridge
    name: database-network
    internal: true  # Not accessible from outside
    ipam:
      config:
        - subnet: 172.29.0.0/16
  betanet-network:
    driver: bridge
    name: betanet-network
    ipam:
      config:
        - subnet: 172.30.0.0/16
  monitoring-network:
    driver: bridge
    name: monitoring-network
    ipam:
      config:
        - subnet: 172.31.0.0/16
