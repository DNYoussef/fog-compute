version: '3.8'

services:
  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: fog-compute-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alerting/rules.yml:/etc/prometheus/rules.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: fog-compute-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-changeme}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST:-smtp.gmail.com:587}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
      - GF_SMTP_FROM_ADDRESS=${SMTP_FROM:-alerts@fogcompute.dev}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
    ports:
      - "3000:3000"
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus
      - loki
      - tempo

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: fog-compute-loki
    command: -config.file=/etc/loki/loki-config.yml
    volumes:
      - ./loki/loki-config.yml:/etc/loki/loki-config.yml
      - loki-data:/loki
    ports:
      - "3100:3100"
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Promtail - Log Shipper
  promtail:
    image: grafana/promtail:latest
    container_name: fog-compute-promtail
    command: -config.file=/etc/promtail/promtail-config.yml
    volumes:
      - ./loki/promtail-config.yml:/etc/promtail/promtail-config.yml
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - loki

  # Tempo - Distributed Tracing
  tempo:
    image: grafana/tempo:latest
    container_name: fog-compute-tempo
    command: [ "-config.file=/etc/tempo/tempo-config.yml" ]
    volumes:
      - ./tempo/tempo-config.yml:/etc/tempo/tempo-config.yml
      - tempo-data:/tmp/tempo
    ports:
      - "3200:3200"   # tempo
      - "4317:4317"   # otlp grpc
      - "4318:4318"   # otlp http
      - "9411:9411"   # zipkin
      - "14268:14268" # jaeger ingest
    networks:
      - monitoring
    restart: unless-stopped

  # Jaeger - Alternative Tracing UI
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: fog-compute-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=badger
      - BADGER_EPHEMERAL=false
      - BADGER_DIRECTORY_VALUE=/badger/data
      - BADGER_DIRECTORY_KEY=/badger/key
    volumes:
      - jaeger-data:/badger
    ports:
      - "16686:16686"  # UI
      - "14250:14250"  # model.proto
    networks:
      - monitoring
    restart: unless-stopped

  # AlertManager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: fog-compute-alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - ./alerting/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager-data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - monitoring
    restart: unless-stopped

  # Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: fog-compute-node-exporter
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9101:9100"
    networks:
      - monitoring
    restart: unless-stopped

  # cAdvisor
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: fog-compute-cadvisor
    privileged: true
    devices:
      - /dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk:/dev/disk:ro
    ports:
      - "9102:8080"
    networks:
      - monitoring
    restart: unless-stopped

  # Betanet Metrics Exporter
  betanet-exporter:
    build:
      context: ./exporters
      dockerfile: Dockerfile.betanet-exporter
    container_name: fog-compute-betanet-exporter
    environment:
      - BETANET_API_URL=${BETANET_API_URL:-http://betanet:8080}
      - METRICS_PORT=9200
    ports:
      - "9200:9200"
    networks:
      - monitoring
      - fog-compute
    restart: unless-stopped

  # BitChat Metrics Exporter
  bitchat-exporter:
    build:
      context: ./exporters
      dockerfile: Dockerfile.bitchat-exporter
    container_name: fog-compute-bitchat-exporter
    environment:
      - BITCHAT_WS_URL=${BITCHAT_WS_URL:-ws://bitchat:3001}
      - METRICS_PORT=9201
    ports:
      - "9201:9201"
    networks:
      - monitoring
      - fog-compute
    restart: unless-stopped

  # Uptime Kuma - Uptime Monitoring
  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: fog-compute-uptime
    volumes:
      - uptime-kuma-data:/app/data
    ports:
      - "3001:3001"
    networks:
      - monitoring
    restart: unless-stopped

  # Sentry - Error Tracking
  sentry-redis:
    image: redis:alpine
    container_name: fog-compute-sentry-redis
    volumes:
      - sentry-redis-data:/data
    networks:
      - monitoring
    restart: unless-stopped

  sentry-postgres:
    image: postgres:14-alpine
    container_name: fog-compute-sentry-postgres
    environment:
      POSTGRES_USER: sentry
      POSTGRES_PASSWORD: ${SENTRY_DB_PASSWORD:-sentry}
      POSTGRES_DB: sentry
    volumes:
      - sentry-postgres-data:/var/lib/postgresql/data
    networks:
      - monitoring
    restart: unless-stopped

networks:
  monitoring:
    driver: bridge
  fog-compute:
    external: true
    name: fog-compute-network

volumes:
  prometheus-data:
  grafana-data:
  loki-data:
  tempo-data:
  jaeger-data:
  alertmanager-data:
  uptime-kuma-data:
  sentry-redis-data:
  sentry-postgres-data: