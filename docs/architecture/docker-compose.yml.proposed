# Docker Compose - Base Configuration
# Production-ready defaults for all services
# Auto-loaded with docker-compose.override.yml for development
# Version: 3.8

version: '3.8'

# YAML Anchors for reusable configuration
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-restart-policy: &restart-policy
  restart: unless-stopped

# ============================================
# SERVICES
# ============================================

services:
  # ==========================================
  # PostgreSQL Database
  # ==========================================
  postgres:
    image: postgres:15-alpine
    container_name: fog-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-fog_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}
      POSTGRES_DB: ${POSTGRES_DB:-fog_compute}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fog_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging: *default-logging
    <<: *restart-policy
    # Note: No ports exposed by default (production security)
    # Dev override will expose 5432

  # ==========================================
  # Backend API Server (FastAPI)
  # ==========================================
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: ${BUILD_TARGET:-production}
      args:
        PYTHON_VERSION: "3.11"
    container_name: fog-backend
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-fog_user}:${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set}@postgres:5432/${POSTGRES_DB:-fog_compute}

      # API Configuration
      API_HOST: ${API_HOST:-0.0.0.0}
      API_PORT: ${API_PORT:-8000}

      # Python
      PYTHONPATH: /app
      PYTHONUNBUFFERED: 1

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}

      # Workers (production)
      WORKERS: ${WORKERS:-4}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - internal
      - public
      - monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging: *default-logging
    <<: *restart-policy
    # Note: No volumes by default (immutable infrastructure)
    # Note: No ports by default (behind reverse proxy in production)
    # Dev override will add bind mounts and expose ports

  # ==========================================
  # Control Panel Frontend (Next.js)
  # ==========================================
  frontend:
    build:
      context: ./apps/control-panel
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
      args:
        NODE_VERSION: "18"
    container_name: fog-frontend
    environment:
      # API Connection (use service name, not localhost)
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://backend:8000}

      # Node
      NODE_ENV: ${NODE_ENV:-production}

      # Next.js
      NEXT_TELEMETRY_DISABLED: ${NEXT_TELEMETRY_DISABLED:-1}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - public
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging: *default-logging
    <<: *restart-policy
    # Note: No volumes by default
    # Note: No ports by default (behind reverse proxy)
    # Dev override will add bind mounts and expose ports

  # ==========================================
  # Redis (Caching & Session Store)
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: fog-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:?REDIS_PASSWORD must be set}
    volumes:
      - redis_data:/data
    networks:
      - internal
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    logging: *default-logging
    <<: *restart-policy
    # Note: No port exposure (internal only)

  # ==========================================
  # Prometheus (Metrics Collection)
  # ==========================================
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: fog-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - internal      # Scrape backend, postgres
      - betanet       # Scrape mixnodes
      - monitoring    # Grafana connection
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging
    <<: *restart-policy
    # Note: No port exposure by default
    # Dev override will expose 9090

  # ==========================================
  # Grafana (Visualization & Dashboards)
  # ==========================================
  grafana:
    image: grafana/grafana:10.1.0
    container_name: fog-grafana
    environment:
      # Security
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD:?GF_SECURITY_ADMIN_PASSWORD must be set}
      GF_USERS_ALLOW_SIGN_UP: false

      # Server
      GF_SERVER_ROOT_URL: ${GF_SERVER_ROOT_URL:-http://localhost:3001}

      # Logging
      GF_LOG_LEVEL: ${GF_LOG_LEVEL:-info}

      # Database (optional - use SQLite by default)
      # GF_DATABASE_TYPE: postgres
      # GF_DATABASE_HOST: postgres:5432
      # GF_DATABASE_NAME: grafana
      # GF_DATABASE_USER: ${POSTGRES_USER}
      # GF_DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - grafana_data:/var/lib/grafana
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging: *default-logging
    <<: *restart-policy
    # Note: No port exposure by default
    # Dev override will expose 3001:3000

  # ==========================================
  # Loki (Log Aggregation)
  # ==========================================
  loki:
    image: grafana/loki:2.9.0
    container_name: fog-loki
    command: -config.file=/etc/loki/config.yml
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/config.yml:ro
      - loki_data:/loki
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging
    <<: *restart-policy
    # Note: No port exposure by default

  # ==========================================
  # Promtail (Log Shipper to Loki)
  # ==========================================
  promtail:
    image: grafana/promtail:2.9.0
    container_name: fog-promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/loki/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - monitoring
    depends_on:
      - loki
    logging: *default-logging
    <<: *restart-policy

# ============================================
# NETWORKS
# ============================================

networks:
  # Internal network (no external access)
  # For: postgres, backend, redis
  internal:
    driver: bridge
    internal: true  # No internet access

  # Public network (external access)
  # For: backend, frontend, nginx (prod)
  public:
    driver: bridge

  # Monitoring network (cross-stack observability)
  # For: prometheus, grafana, loki
  monitoring:
    driver: bridge

  # Betanet network (defined in betanet compose)
  # For: mixnodes
  betanet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

# ============================================
# VOLUMES
# ============================================

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

# ============================================
# SECRETS (Production)
# ============================================

# Secrets are defined in production compose
# See docker-compose.prod.yml
