# E2E Tests for Fog Compute Platform
# NOW RUNS AGAINST REAL BACKEND (updated Week 1)
#
# Tests run with:
#   - PostgreSQL database (seeded with test data)
#   - FastAPI backend server (port 8000)
#   - Next.js frontend (port 3000)

name: E2E Tests - Fog Compute

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  test:
    timeout-minutes: 60
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        browser: [chromium, firefox, webkit]
        shard: [1, 2, 3, 4]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Start PostgreSQL
        uses: ikalnytskyi/action-setup-postgres@v5
        with:
          username: postgres
          password: postgres
          database: fog_compute_test
          port: 5432
        id: postgres

      - name: Install Python dependencies
        run: |
          pip install -r backend/requirements.txt

      - name: Seed test database
        run: |
          python -m backend.server.tests.fixtures.seed_data --quick
        env:
          DATABASE_URL: ${{ steps.postgres.outputs.connection-uri }}

      - name: Install dependencies
        run: |
          npm ci
          cd apps/control-panel && npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Start Backend Server (Unix)
        if: runner.os != 'Windows'
        run: |
          cd backend
          python -m uvicorn server.main:app --port 8000 > backend.log 2>&1 &
          echo $! > backend.pid
        env:
          DATABASE_URL: ${{ steps.postgres.outputs.connection-uri }}

      - name: Start Backend Server (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd backend
          Start-Process python -ArgumentList "-m", "uvicorn", "server.main:app", "--port", "8000" -RedirectStandardOutput backend.log -RedirectStandardError backend-error.log -NoNewWindow
          Start-Sleep -Seconds 5
        env:
          DATABASE_URL: ${{ steps.postgres.outputs.connection-uri }}

      - name: Start Frontend Server (Unix)
        if: runner.os != 'Windows'
        run: |
          cd apps/control-panel
          npm run dev > frontend.log 2>&1 &
          echo $! > frontend.pid

      - name: Start Frontend Server (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd apps/control-panel
          Start-Process npm -ArgumentList "run", "dev" -RedirectStandardOutput frontend.log -RedirectStandardError frontend-error.log -NoNewWindow
          Start-Sleep -Seconds 10

      - name: Wait for servers to be ready (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "Waiting for backend health check..."
          timeout 120 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done' || (echo "Backend failed to start" && cat backend/backend.log && exit 1)
          echo "Waiting for frontend..."
          timeout 120 bash -c 'until curl -f http://localhost:3000; do sleep 2; done' || (echo "Frontend failed to start" && cat apps/control-panel/frontend.log && exit 1)
          echo "Both servers are ready!"

      - name: Wait for servers to be ready (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Waiting for backend health check..."
          $maxAttempts = 60
          $attempt = 0
          while ($attempt -lt $maxAttempts) {
            try {
              $response = Invoke-WebRequest -Uri http://localhost:8000/health -UseBasicParsing -TimeoutSec 2
              if ($response.StatusCode -eq 200) { break }
            } catch { }
            Start-Sleep -Seconds 2
            $attempt++
          }
          if ($attempt -eq $maxAttempts) {
            Write-Host "Backend failed to start"
            Get-Content backend/backend.log -ErrorAction SilentlyContinue
            exit 1
          }
          Write-Host "Waiting for frontend..."
          $attempt = 0
          while ($attempt -lt $maxAttempts) {
            try {
              $response = Invoke-WebRequest -Uri http://localhost:3000 -UseBasicParsing -TimeoutSec 2
              if ($response.StatusCode -eq 200) { break }
            } catch { }
            Start-Sleep -Seconds 2
            $attempt++
          }
          if ($attempt -eq $maxAttempts) {
            Write-Host "Frontend failed to start"
            Get-Content apps/control-panel/frontend.log -ErrorAction SilentlyContinue
            exit 1
          }
          Write-Host "Both servers are ready!"

      - name: Run E2E tests (shard ${{ matrix.shard }}/4)
        run: npx playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shard }}/4
        env:
          CI: true
          DATABASE_URL: ${{ steps.postgres.outputs.connection-uri }}

      - name: Stop servers (Unix)
        if: always() && runner.os != 'Windows'
        run: |
          if [ -f backend/backend.pid ]; then kill $(cat backend/backend.pid) || true; fi
          if [ -f apps/control-panel/frontend.pid ]; then kill $(cat apps/control-panel/frontend.pid) || true; fi

      - name: Stop servers (Windows)
        if: always() && runner.os == 'Windows'
        shell: pwsh
        run: |
          Get-Process -Name python -ErrorAction SilentlyContinue | Where-Object { $_.Path -like "*uvicorn*" } | Stop-Process -Force -ErrorAction SilentlyContinue
          Get-Process -Name node -ErrorAction SilentlyContinue | Where-Object { $_.CommandLine -like "*npm run dev*" } | Stop-Process -Force -ErrorAction SilentlyContinue

      - name: Upload blob report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: blob-report-${{ matrix.os }}-${{ matrix.browser }}-${{ matrix.shard }}
          path: blob-report/
          retention-days: 1

  mobile-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        device: ['iPhone 12', 'Pixel 5', 'iPad']

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Start PostgreSQL
        uses: ikalnytskyi/action-setup-postgres@v5
        with:
          username: postgres
          password: postgres
          database: fog_compute_test
          port: 5432
        id: postgres

      - name: Install Python dependencies
        run: |
          pip install -r backend/requirements.txt

      - name: Seed test database
        run: |
          python -m backend.server.tests.fixtures.seed_data --quick
        env:
          DATABASE_URL: ${{ steps.postgres.outputs.connection-uri }}

      - name: Install dependencies
        run: |
          npm ci
          cd apps/control-panel && npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Start Backend Server (Unix)
        if: runner.os != 'Windows'
        run: |
          cd backend
          python -m uvicorn server.main:app --port 8000 > backend.log 2>&1 &
          echo $! > backend.pid
        env:
          DATABASE_URL: ${{ steps.postgres.outputs.connection-uri }}

      - name: Start Backend Server (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd backend
          Start-Process python -ArgumentList "-m", "uvicorn", "server.main:app", "--port", "8000" -RedirectStandardOutput backend.log -RedirectStandardError backend-error.log -NoNewWindow
          Start-Sleep -Seconds 5
        env:
          DATABASE_URL: ${{ steps.postgres.outputs.connection-uri }}

      - name: Start Frontend Server (Unix)
        if: runner.os != 'Windows'
        run: |
          cd apps/control-panel
          npm run dev > frontend.log 2>&1 &
          echo $! > frontend.pid

      - name: Start Frontend Server (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd apps/control-panel
          Start-Process npm -ArgumentList "run", "dev" -RedirectStandardOutput frontend.log -RedirectStandardError frontend-error.log -NoNewWindow
          Start-Sleep -Seconds 10

      - name: Wait for servers to be ready (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "Waiting for backend health check..."
          timeout 120 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done' || (echo "Backend failed to start" && cat backend/backend.log && exit 1)
          echo "Waiting for frontend..."
          timeout 120 bash -c 'until curl -f http://localhost:3000; do sleep 2; done' || (echo "Frontend failed to start" && cat apps/control-panel/frontend.log && exit 1)
          echo "Both servers are ready!"

      - name: Wait for servers to be ready (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Waiting for backend health check..."
          $maxAttempts = 60
          $attempt = 0
          while ($attempt -lt $maxAttempts) {
            try {
              $response = Invoke-WebRequest -Uri http://localhost:8000/health -UseBasicParsing -TimeoutSec 2
              if ($response.StatusCode -eq 200) { break }
            } catch { }
            Start-Sleep -Seconds 2
            $attempt++
          }
          if ($attempt -eq $maxAttempts) {
            Write-Host "Backend failed to start"
            Get-Content backend/backend.log -ErrorAction SilentlyContinue
            exit 1
          }
          Write-Host "Waiting for frontend..."
          $attempt = 0
          while ($attempt -lt $maxAttempts) {
            try {
              $response = Invoke-WebRequest -Uri http://localhost:3000 -UseBasicParsing -TimeoutSec 2
              if ($response.StatusCode -eq 200) { break }
            } catch { }
            Start-Sleep -Seconds 2
            $attempt++
          }
          if ($attempt -eq $maxAttempts) {
            Write-Host "Frontend failed to start"
            Get-Content apps/control-panel/frontend.log -ErrorAction SilentlyContinue
            exit 1
          }
          Write-Host "Both servers are ready!"

      - name: Run mobile tests
        run: npx playwright test --project="Mobile ${{ matrix.device }}"
        env:
          CI: true
          DATABASE_URL: ${{ steps.postgres.outputs.connection-uri }}

      - name: Stop servers (Unix)
        if: always() && runner.os != 'Windows'
        run: |
          if [ -f backend/backend.pid ]; then kill $(cat backend/backend.pid) || true; fi
          if [ -f apps/control-panel/frontend.pid ]; then kill $(cat apps/control-panel/frontend.pid) || true; fi

      - name: Stop servers (Windows)
        if: always() && runner.os == 'Windows'
        shell: pwsh
        run: |
          Get-Process -Name python -ErrorAction SilentlyContinue | Where-Object { $_.Path -like "*uvicorn*" } | Stop-Process -Force -ErrorAction SilentlyContinue
          Get-Process -Name node -ErrorAction SilentlyContinue | Where-Object { $_.CommandLine -like "*npm run dev*" } | Stop-Process -Force -ErrorAction SilentlyContinue

      - name: Upload mobile test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mobile-results-${{ matrix.device }}
          path: test-results/

  cross-browser:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Start PostgreSQL
        uses: ikalnytskyi/action-setup-postgres@v5
        with:
          username: postgres
          password: postgres
          database: fog_compute_test
          port: 5432
        id: postgres

      - name: Install Python dependencies
        run: |
          pip install -r backend/requirements.txt

      - name: Seed test database
        run: |
          python -m backend.server.tests.fixtures.seed_data --quick
        env:
          DATABASE_URL: ${{ steps.postgres.outputs.connection-uri }}

      - name: Install dependencies
        run: |
          npm ci
          cd apps/control-panel && npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Start Backend Server (Unix)
        if: runner.os != 'Windows'
        run: |
          cd backend
          python -m uvicorn server.main:app --port 8000 > backend.log 2>&1 &
          echo $! > backend.pid
        env:
          DATABASE_URL: ${{ steps.postgres.outputs.connection-uri }}

      - name: Start Backend Server (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd backend
          Start-Process python -ArgumentList "-m", "uvicorn", "server.main:app", "--port", "8000" -RedirectStandardOutput backend.log -RedirectStandardError backend-error.log -NoNewWindow
          Start-Sleep -Seconds 5
        env:
          DATABASE_URL: ${{ steps.postgres.outputs.connection-uri }}

      - name: Start Frontend Server (Unix)
        if: runner.os != 'Windows'
        run: |
          cd apps/control-panel
          npm run dev > frontend.log 2>&1 &
          echo $! > frontend.pid

      - name: Start Frontend Server (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd apps/control-panel
          Start-Process npm -ArgumentList "run", "dev" -RedirectStandardOutput frontend.log -RedirectStandardError frontend-error.log -NoNewWindow
          Start-Sleep -Seconds 10

      - name: Wait for servers to be ready (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "Waiting for backend health check..."
          timeout 120 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done' || (echo "Backend failed to start" && cat backend/backend.log && exit 1)
          echo "Waiting for frontend..."
          timeout 120 bash -c 'until curl -f http://localhost:3000; do sleep 2; done' || (echo "Frontend failed to start" && cat apps/control-panel/frontend.log && exit 1)
          echo "Both servers are ready!"

      - name: Wait for servers to be ready (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "Waiting for backend health check..."
          $maxAttempts = 60
          $attempt = 0
          while ($attempt -lt $maxAttempts) {
            try {
              $response = Invoke-WebRequest -Uri http://localhost:8000/health -UseBasicParsing -TimeoutSec 2
              if ($response.StatusCode -eq 200) { break }
            } catch { }
            Start-Sleep -Seconds 2
            $attempt++
          }
          if ($attempt -eq $maxAttempts) {
            Write-Host "Backend failed to start"
            Get-Content backend/backend.log -ErrorAction SilentlyContinue
            exit 1
          }
          Write-Host "Waiting for frontend..."
          $attempt = 0
          while ($attempt -lt $maxAttempts) {
            try {
              $response = Invoke-WebRequest -Uri http://localhost:3000 -UseBasicParsing -TimeoutSec 2
              if ($response.StatusCode -eq 200) { break }
            } catch { }
            Start-Sleep -Seconds 2
            $attempt++
          }
          if ($attempt -eq $maxAttempts) {
            Write-Host "Frontend failed to start"
            Get-Content apps/control-panel/frontend.log -ErrorAction SilentlyContinue
            exit 1
          }
          Write-Host "Both servers are ready!"

      - name: Run cross-browser tests
        run: npx playwright test tests/e2e/cross-platform.spec.ts
        env:
          CI: true
          DATABASE_URL: ${{ steps.postgres.outputs.connection-uri }}

      - name: Stop servers (Unix)
        if: always() && runner.os != 'Windows'
        run: |
          if [ -f backend/backend.pid ]; then kill $(cat backend/backend.pid) || true; fi
          if [ -f apps/control-panel/frontend.pid ]; then kill $(cat apps/control-panel/frontend.pid) || true; fi

      - name: Stop servers (Windows)
        if: always() && runner.os == 'Windows'
        shell: pwsh
        run: |
          Get-Process -Name python -ErrorAction SilentlyContinue | Where-Object { $_.Path -like "*uvicorn*" } | Stop-Process -Force -ErrorAction SilentlyContinue
          Get-Process -Name node -ErrorAction SilentlyContinue | Where-Object { $_.CommandLine -like "*npm run dev*" } | Stop-Process -Force -ErrorAction SilentlyContinue

      - name: Upload cross-browser report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cross-browser-report
          path: test-results/

  merge-reports:
    if: always()
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm ci
          cd apps/control-panel && npm ci

      - name: Download blob reports
        uses: actions/download-artifact@v4
        with:
          path: all-blob-reports
          pattern: blob-report-*
          merge-multiple: true

      - name: Merge reports
        run: npx playwright merge-reports --reporter html ./all-blob-reports

      - name: Upload combined HTML report
        uses: actions/upload-artifact@v4
        with:
          name: combined-html-report
          path: playwright-report/
          retention-days: 14

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./playwright-report

  # DISABLED: visual-regression (no visual regression tests implemented yet)
  # visual-regression:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: mcr.microsoft.com/playwright:v1.40.0-jammy
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #
  #     - name: Install dependencies
  #       run: |
  #         npm ci
  #         cd apps/control-panel && npm ci
  #
  #     - name: Run visual regression tests
  #       run: npx playwright test --grep @visual --update-snapshots
  #
  #     - name: Upload updated snapshots
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: updated-snapshots
  #         path: tests/**/*.png

  # DISABLED: betanet-monitoring (will re-enable with backend integration)
  # betanet-monitoring:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #
  #     - name: Install dependencies
  #       run: npm ci
  #
  #     - name: Install Playwright
  #       run: npx playwright install --with-deps chromium
  #
  #     - name: Run betanet monitoring tests
  #       run: npx playwright test tests/e2e/betanet-monitoring.spec.ts

  # DISABLED: bitchat-p2p
  # bitchat-p2p:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #
  #     - name: Install dependencies
  #       run: npm ci
  #
  #     - name: Install Playwright
  #       run: npx playwright install --with-deps chromium
  #
  #     - name: Run Bitchat P2P tests
  #       run: npx playwright test tests/e2e/bitchat-messaging.spec.ts

  # DISABLED: benchmark-visualization
  # benchmark-visualization:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #
  #     - name: Install dependencies
  #       run: npm ci
  #
  #     - name: Install Playwright
  #       run: npx playwright install --with-deps chromium
  #
  #     - name: Run benchmark visualization tests
  #       run: npx playwright test tests/e2e/benchmarks-visualization.spec.ts