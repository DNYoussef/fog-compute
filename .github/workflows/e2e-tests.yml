# E2E Tests for Fog Compute Platform
# NOW RUNS AGAINST REAL BACKEND (updated Week 1)
#
# Tests run with:
#   - PostgreSQL database (seeded with test data)
#   - FastAPI backend server (port 8000)
#   - Next.js frontend (port 3000)

name: E2E Tests - Fog Compute

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  test:
    timeout-minutes: 60
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        browser: [chromium, firefox, webkit]
        shard: [1, 2, 3, 4]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Start PostgreSQL
        uses: ikalnytskyi/action-setup-postgres@v5
        with:
          username: postgres
          password: postgres
          database: fog_compute_test_shard_${{ matrix.shard }}
          port: 5432
        id: postgres

      - name: Install Python dependencies
        run: |
          pip install -r backend/requirements.txt

      - name: Seed test database
        run: |
          python -m backend.server.tests.fixtures.seed_data --quick
        env:
          DATABASE_URL: ${{ steps.postgres.outputs.connection-uri }}

      - name: Install dependencies
        run: |
          npm ci
          cd apps/control-panel && npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Set DATABASE_URL environment variable (Unix)
        if: runner.os != 'Windows'
        run: echo "DATABASE_URL=${{ steps.postgres.outputs.connection-uri }}" >> $GITHUB_ENV

      - name: Set DATABASE_URL environment variable (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: echo "DATABASE_URL=${{ steps.postgres.outputs.connection-uri }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Start Backend Server (Linux)
        if: runner.os == 'Linux'
        run: |
          cd backend
          DATABASE_URL="${{ steps.postgres.outputs.connection-uri }}" nohup python -m uvicorn server.main:app --host 0.0.0.0 --port 8000 > backend.log 2>&1 &
          echo $! > backend.pid

      - name: Start Backend Server (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd backend
          $env:DATABASE_URL = "${{ steps.postgres.outputs.connection-uri }}"
          Start-Process python -ArgumentList "-m", "uvicorn", "server.main:app", "--host", "0.0.0.0", "--port", "8000" -NoNewWindow -RedirectStandardOutput backend.log -RedirectStandardError backend-error.log
          Get-Process python | Select-Object -Last 1 | Select-Object -ExpandProperty Id | Out-File -FilePath backend.pid

      - name: Start Frontend Server (Linux)
        if: runner.os == 'Linux'
        run: |
          cd apps/control-panel
          nohup npm run dev > frontend.log 2>&1 &
          echo $! > frontend.pid

      - name: Start Frontend Server (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd apps/control-panel
          Start-Process npm -ArgumentList "run", "dev" -NoNewWindow -RedirectStandardOutput frontend.log -RedirectStandardError frontend-error.log
          Get-Process node | Select-Object -Last 1 | Select-Object -ExpandProperty Id | Out-File -FilePath frontend.pid

      - name: Wait for Services
        run: |
          echo "Waiting for backend and frontend to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:8000/health 2>/dev/null && curl -f http://localhost:3000 2>/dev/null; then
              echo "Services are ready!"
              break
            fi
            echo "Attempt $i/30: Services not ready yet, waiting..."
            sleep 2
          done
        shell: bash

      - name: Run E2E tests (shard ${{ matrix.shard }}/4)
        run: |
          # Sharding applies to TEST FILES, not projects
          # Each shard runs the specified browser project for 1/4 of test files
          # Example: Shard 1/4 with --project=chromium runs chromium tests for first 25% of test files
          npx playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shard }}/4
        env:
          CI: true

      - name: Upload blob report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: blob-report-${{ matrix.os }}-${{ matrix.browser }}-${{ matrix.shard }}
          path: blob-report/
          retention-days: 1

      - name: Cleanup Servers (Linux)
        if: always() && runner.os == 'Linux'
        run: |
          if [ -f backend/backend.pid ]; then
            kill $(cat backend/backend.pid) 2>/dev/null || true
          fi
          if [ -f apps/control-panel/frontend.pid ]; then
            kill $(cat apps/control-panel/frontend.pid) 2>/dev/null || true
          fi

      - name: Cleanup Servers (Windows)
        if: always() && runner.os == 'Windows'
        shell: pwsh
        run: |
          if (Test-Path backend/backend.pid) {
            $pid = Get-Content backend/backend.pid
            Stop-Process -Id $pid -Force -ErrorAction SilentlyContinue
          }
          if (Test-Path apps/control-panel/frontend.pid) {
            $pid = Get-Content apps/control-panel/frontend.pid
            Stop-Process -Id $pid -Force -ErrorAction SilentlyContinue
          }

  mobile-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ['Mobile Safari', 'Mobile Chrome', 'iPad']

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Start PostgreSQL
        uses: ikalnytskyi/action-setup-postgres@v5
        with:
          username: postgres
          password: postgres
          database: fog_compute_test
          port: 5432
        id: postgres

      - name: Install Python dependencies
        run: |
          pip install -r backend/requirements.txt

      - name: Seed test database
        run: |
          python -m backend.server.tests.fixtures.seed_data --quick
        env:
          DATABASE_URL: ${{ steps.postgres.outputs.connection-uri }}

      - name: Install dependencies
        run: |
          npm ci
          cd apps/control-panel && npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Set DATABASE_URL environment variable
        run: echo "DATABASE_URL=${{ steps.postgres.outputs.connection-uri }}" >> $GITHUB_ENV

      - name: Start Backend Server
        run: |
          cd backend
          DATABASE_URL="${{ steps.postgres.outputs.connection-uri }}" nohup python -m uvicorn server.main:app --host 0.0.0.0 --port 8000 > backend.log 2>&1 &
          echo $! > backend.pid

      - name: Start Frontend Server
        run: |
          cd apps/control-panel
          nohup npm run dev > frontend.log 2>&1 &
          echo $! > frontend.pid

      - name: Wait for Services
        run: |
          echo "Waiting for backend and frontend to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:8000/health 2>/dev/null && curl -f http://localhost:3000 2>/dev/null; then
              echo "Services are ready!"
              break
            fi
            echo "Attempt $i/30: Services not ready yet, waiting..."
            sleep 2
          done

      - name: Run mobile tests
        run: npx playwright test --project="${{ matrix.project }}"
        env:
          CI: true

      - name: Upload mobile test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mobile-results-${{ matrix.project }}
          path: test-results/

      - name: Cleanup Servers
        if: always()
        run: |
          if [ -f backend/backend.pid ]; then
            kill $(cat backend/backend.pid) 2>/dev/null || true
          fi
          if [ -f apps/control-panel/frontend.pid ]; then
            kill $(cat apps/control-panel/frontend.pid) 2>/dev/null || true
          fi

  cross-browser:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Start PostgreSQL
        uses: ikalnytskyi/action-setup-postgres@v5
        with:
          username: postgres
          password: postgres
          database: fog_compute_test
          port: 5432
        id: postgres

      - name: Install Python dependencies
        run: |
          pip install -r backend/requirements.txt

      - name: Seed test database
        run: |
          python -m backend.server.tests.fixtures.seed_data --quick
        env:
          DATABASE_URL: ${{ steps.postgres.outputs.connection-uri }}

      - name: Install dependencies
        run: |
          npm ci
          cd apps/control-panel && npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Set DATABASE_URL environment variable
        run: echo "DATABASE_URL=${{ steps.postgres.outputs.connection-uri }}" >> $GITHUB_ENV

      - name: Start Backend Server
        run: |
          cd backend
          DATABASE_URL="${{ steps.postgres.outputs.connection-uri }}" nohup python -m uvicorn server.main:app --host 0.0.0.0 --port 8000 > backend.log 2>&1 &
          echo $! > backend.pid

      - name: Start Frontend Server
        run: |
          cd apps/control-panel
          nohup npm run dev > frontend.log 2>&1 &
          echo $! > frontend.pid

      - name: Wait for Services
        run: |
          echo "Waiting for backend and frontend to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:8000/health 2>/dev/null && curl -f http://localhost:3000 2>/dev/null; then
              echo "Services are ready!"
              break
            fi
            echo "Attempt $i/30: Services not ready yet, waiting..."
            sleep 2
          done

      - name: Run cross-browser tests
        run: npx playwright test tests/e2e/cross-platform.spec.ts
        env:
          CI: true

      - name: Upload cross-browser report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cross-browser-report
          path: test-results/

      - name: Cleanup Servers
        if: always()
        run: |
          if [ -f backend/backend.pid ]; then
            kill $(cat backend/backend.pid) 2>/dev/null || true
          fi
          if [ -f apps/control-panel/frontend.pid ]; then
            kill $(cat apps/control-panel/frontend.pid) 2>/dev/null || true
          fi

  merge-reports:
    if: always()
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm ci
          cd apps/control-panel && npm ci

      - name: Download blob reports
        uses: actions/download-artifact@v4
        with:
          path: all-blob-reports
          pattern: blob-report-*
          merge-multiple: true
        continue-on-error: true

      - name: Merge reports
        run: |
          if [ -d "all-blob-reports" ] && [ "$(ls -A all-blob-reports 2>/dev/null)" ]; then
            echo "Merging blob reports into HTML report..."
            npx playwright merge-reports --reporter html ./all-blob-reports
          else
            echo "No blob reports found, creating placeholder report..."
            mkdir -p playwright-report
            echo "<html><head><title>No Test Reports</title></head><body><h1>No test reports available</h1><p>All test jobs may have failed or no artifacts were uploaded.</p></body></html>" > playwright-report/index.html
          fi

      - name: Upload combined HTML report
        uses: actions/upload-artifact@v4
        with:
          name: combined-html-report
          path: playwright-report/
          retention-days: 14

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./playwright-report

  # DISABLED: visual-regression (no visual regression tests implemented yet)
  # visual-regression:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: mcr.microsoft.com/playwright:v1.40.0-jammy
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #
  #     - name: Install dependencies
  #       run: |
  #         npm ci
  #         cd apps/control-panel && npm ci
  #
  #     - name: Run visual regression tests
  #       run: npx playwright test --grep @visual --update-snapshots
  #
  #     - name: Upload updated snapshots
  #       if: always()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: updated-snapshots
  #         path: tests/**/*.png

  # DISABLED: betanet-monitoring (will re-enable with backend integration)
  # betanet-monitoring:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #
  #     - name: Install dependencies
  #       run: npm ci
  #
  #     - name: Install Playwright
  #       run: npx playwright install --with-deps chromium
  #
  #     - name: Run betanet monitoring tests
  #       run: npx playwright test tests/e2e/betanet-monitoring.spec.ts

  # DISABLED: bitchat-p2p
  # bitchat-p2p:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #
  #     - name: Install dependencies
  #       run: npm ci
  #
  #     - name: Install Playwright
  #       run: npx playwright install --with-deps chromium
  #
  #     - name: Run Bitchat P2P tests
  #       run: npx playwright test tests/e2e/bitchat-messaging.spec.ts

  # DISABLED: benchmark-visualization
  # benchmark-visualization:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #
  #     - name: Install dependencies
  #       run: npm ci
  #
  #     - name: Install Playwright
  #       run: npx playwright install --with-deps chromium
  #
  #     - name: Run benchmark visualization tests
  #       run: npx playwright test tests/e2e/benchmarks-visualization.spec.ts